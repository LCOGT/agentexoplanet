# Generated by Django 2.1.3 on 2018-11-13 13:39

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tag', models.CharField(default='LCO', max_length=75)),
                ('organization', models.CharField(blank=True, max_length=150)),
                ('dataexploreview', models.BooleanField(default=True, verbose_name='use web interface for dataexplorer')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'observer',
                'db_table': 'observer',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded', models.DateTimeField(blank=True, default=datetime.datetime.now)),
            ],
            options={
                'verbose_name': 'achievement unlocked',
                'verbose_name_plural': 'achievements unlocked',
                'db_table': 'dataexplorer_achievement',
            },
        ),
        migrations.CreateModel(
            name='AverageSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('values', models.TextField(blank=True, null=True)),
                ('settype', models.CharField(choices=[('S', 'Source'), ('C', 'Calibration'), ('B', 'Background'), ('R', 'Reduced'), ('F', 'Final'), ('E', 'Error bar')], max_length=1)),
            ],
            options={
                'verbose_name': 'combined lightcurve set',
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='code, no spaces', max_length=20)),
                ('description', models.CharField(help_text='brief, publicly readable', max_length=200)),
                ('image', models.FileField(upload_to='badge')),
            ],
            options={
                'verbose_name': 'badge',
                'db_table': 'dataexplorer_badge',
            },
        ),
        migrations.CreateModel(
            name='CatSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='object name')),
                ('xpos', models.IntegerField(blank=True, verbose_name='x position on finder image')),
                ('ypos', models.IntegerField(blank=True, verbose_name='y position on finder image')),
                ('catalogue', models.CharField(max_length=20, verbose_name='catalogue name')),
                ('final', models.BooleanField(default=True, verbose_name='include in final curve')),
            ],
            options={
                'verbose_name': 'catalogue source',
                'db_table': 'dataexplorer_catsource',
            },
        ),
        migrations.CreateModel(
            name='DataCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.BooleanField(default=False)),
                ('complete', models.BooleanField(default=False)),
                ('calid', models.IntegerField(verbose_name='calibrator order')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'data collection',
                'db_table': 'dataexplorer_datacollection',
            },
        ),
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ident', models.CharField(max_length=20)),
                ('taken', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('value', models.FloatField(blank=True, null=True)),
                ('pointtype', models.CharField(choices=[('S', 'Source'), ('C', 'Calibration'), ('B', 'Background'), ('R', 'Reduced'), ('F', 'Final'), ('E', 'Error bar')], max_length=1)),
                ('xpos', models.IntegerField(blank=True, verbose_name='x position')),
                ('ypos', models.IntegerField(blank=True, verbose_name='y position')),
                ('radius', models.IntegerField(blank=True, verbose_name='aperture radius')),
                ('entrymode', models.CharField(choices=[('W', 'Web'), ('M', 'Manual'), ('N', 'No javascript')], default='W', max_length=1)),
                ('offset', models.FloatField(blank=True, verbose_name='distance from source')),
                ('tstamp', models.IntegerField(blank=True, verbose_name='unix timestamp')),
                ('coorder', models.ForeignKey(blank=True, help_text='point order', null=True, on_delete=django.db.models.deletion.CASCADE, to='agentex.DataCollection')),
            ],
            options={
                'verbose_name': 'data point',
                'db_table': 'dataexplorer_datapoint',
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fits', models.URLField(blank=True)),
                ('image', models.URLField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('telescopeid', models.CharField(blank=True, max_length=100)),
                ('max_x', models.IntegerField(verbose_name='max pixels (x)')),
                ('max_y', models.IntegerField(verbose_name='max pixels (y)')),
            ],
            options={
                'verbose_name': 'data source image',
                'db_table': 'dataexplorer_datasource',
            },
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(choices=[('D', 'Dip'), ('N', 'No Dip'), ('O', 'Odd'), ('B', 'Blip'), ('P', 'Periodic'), ('S', 'Noise'), ('R', 'Other')], max_length=1, verbose_name='decision')),
                ('taken', models.DateTimeField(default=datetime.datetime.now)),
                ('current', models.BooleanField(default=False)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'lightcurve decision',
                'db_table': 'dataexplorer_decision',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='code, no spaces and no hyphens', max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('start', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('end', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('midpoint', models.DateTimeField(blank=True, null=True)),
                ('numobs', models.IntegerField(blank=True, default=0, null=True)),
                ('finder', models.IntegerField(blank=True, verbose_name='id of finder chart source')),
                ('xpos', models.IntegerField(default=0, verbose_name='x pos on finder chart')),
                ('ypos', models.IntegerField(default=0, verbose_name='y pos on finder chart')),
                ('enabled', models.BooleanField(default=True, help_text='show this event on main site')),
                ('illustration', models.FileField(blank=True, help_text='illustration for this event', upload_to='illustration', verbose_name='illustration')),
                ('radius', models.IntegerField(default=10, verbose_name='aperture radius')),
            ],
            options={
                'verbose_name': 'transit event',
                'db_table': 'dataexplorer_event',
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('ra', models.CharField(blank=True, max_length=100, verbose_name='right ascension')),
                ('dec', models.CharField(blank=True, max_length=100, verbose_name='declination')),
                ('constellation', models.CharField(blank=True, max_length=100)),
                ('magv', models.CharField(blank=True, max_length=100, verbose_name='apparent magnitude V')),
                ('inclination', models.FloatField(blank=True, null=True, verbose_name='inclination of planet orbit')),
                ('period', models.FloatField(blank=True, null=True, verbose_name='period of planet orbit (days)')),
                ('rstar', models.FloatField(blank=True, null=True, verbose_name='radius of host star')),
                ('ap', models.FloatField(blank=True, null=True, verbose_name='semi-major axis')),
                ('mass', models.FloatField(blank=True, null=True, verbose_name='mass of host star')),
                ('description', models.TextField()),
                ('finderchart', models.FileField(blank=True, help_text='Image with a clearly marked up target position', upload_to='finderchart', verbose_name='Finder chart')),
                ('finderchart_tb', models.FileField(blank=True, help_text='Image with a clearly marked up target position', upload_to='finderchart/thumb', verbose_name='Finder chart thumbnail')),
                ('exoplanet_enc_pl', models.URLField(blank=True, null=True, verbose_name='Exoplanet Encyclopaedia: Planet')),
                ('exoplanet_enc_st', models.URLField(blank=True, null=True, verbose_name='Exoplanet Encyclopaedia: Star')),
                ('etd_pl', models.URLField(blank=True, null=True, verbose_name='Exoplanet Transit Database: Planet')),
                ('simbad_pl', models.URLField(blank=True, null=True, verbose_name='Simbad: Planet')),
                ('simbad_st', models.URLField(blank=True, null=True, verbose_name='Simbad: Star')),
            ],
            options={
                'verbose_name': 'transiting exoplanet target',
                'db_table': 'dataexplorer_target',
            },
        ),
        migrations.AddField(
            model_name='decision',
            name='planet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.Event'),
        ),
        migrations.AddField(
            model_name='decision',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.CatSource'),
        ),
        migrations.AddField(
            model_name='datasource',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.Event'),
        ),
        migrations.AddField(
            model_name='datasource',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.Target'),
        ),
        migrations.AddField(
            model_name='datapoint',
            name='data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.DataSource'),
        ),
        migrations.AddField(
            model_name='datapoint',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='datacollection',
            name='planet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.Event'),
        ),
        migrations.AddField(
            model_name='datacollection',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='agentex.CatSource'),
        ),
        migrations.AddField(
            model_name='catsource',
            name='data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.DataSource'),
        ),
        migrations.AddField(
            model_name='averageset',
            name='planet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.Event'),
        ),
        migrations.AddField(
            model_name='averageset',
            name='star',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='agentex.CatSource'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='badge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agentex.Badge'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='achievement',
            name='planet',
            field=models.ForeignKey(blank=True, help_text='planet', null=True, on_delete=django.db.models.deletion.CASCADE, to='agentex.Event'),
        ),
    ]
